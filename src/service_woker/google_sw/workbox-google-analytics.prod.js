this.workbox = this.workbox || {}, this.workbox.googleAnalytics = (function (e, n, t, o, r, c, s) { 'use strict'; try { self.workbox.v['workbox:google-analytics:3.6.1'] = 1; } catch (e) {} const l = /^\/(\w+\/)?collect/; const i = (a = babelHelpers.asyncToGenerator(function*(e) { return yield new Promise(function (n, t) { const o = new FileReader(); o.onloadend = function () { return n(o.result); }, o.onerror = function () { return t(o.error); }, o.readAsText(e); }); }), function (e) { return a.apply(this, arguments); }); var a; const w = e => (u = babelHelpers.asyncToGenerator(function*(n) { let t; let { url: o, requestInit: r, timestamp: c } = n; if (o = new URL(o), r.body) { const e = r.body instanceof Blob ? yield i(r.body) : r.body; t = new URLSearchParams(e); } else t = o.searchParams; const s = c - (Number(t.get('qt')) || 0); const l = Date.now() - s; if (t.set('qt', l), e.parameterOverrides) for (const n of Object.keys(e.parameterOverrides)) { const o = e.parameterOverrides[n]; t.set(n, o); } typeof e.hitFilter === 'function' && e.hitFilter.call(null, t), r.body = t.toString(), r.method = 'POST', r.mode = 'cors', r.credentials = 'omit', r.headers = { 'Content-Type': 'text/plain' }, n.url = `${o.origin}${o.pathname}`; }), function (e) { return u.apply(this, arguments); }); var u; return e.initialize = (e = {}) => { const i = t.cacheNames.getGoogleAnalyticsName(e.cacheName); const a = new n.Plugin('workbox-google-analytics', { maxRetentionTime: 2880, callbacks: { requestWillReplay: w(e) } }); const u = [(e => { const n = new c.NetworkFirst({ cacheName: e }); return new o.Route(({ url: e }) => e.hostname === 'www.google-analytics.com' && e.pathname === '/analytics.js', n, 'GET'); })(i), (e => { const n = new c.NetworkFirst({ cacheName: e }); return new o.Route(({ url: e }) => e.hostname === 'www.googletagmanager.com' && e.pathname === '/gtag/js', n, 'GET'); })(i), ...(e => { const n = ({ url: e }) => e.hostname === 'www.google-analytics.com' && l.test(e.pathname); const t = new s.NetworkOnly({ plugins: [e] }); return [new o.Route(n, t, 'GET'), new o.Route(n, t, 'POST')]; })(a)]; const f = new r.Router(); for (const e of u)f.registerRoute(e); self.addEventListener('fetch', e => { const n = f.handleRequest(e); n && e.respondWith(n); }); }, e; }({}, workbox.backgroundSync, workbox.core._private, workbox.routing, workbox.routing, workbox.strategies, workbox.strategies));

// # sourceMappingURL=workbox-google-analytics.prod.js.map
